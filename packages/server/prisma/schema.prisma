generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  name         String?
  email        String             @unique
  hash         String
  hashedRt     String?
  collections  Collection[]       @relation(name: "UserCollections")
  wordProgress UserWordProgress[] @relation(name: "UserWordProgress")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  UserCollectionSettings UserCollectionSettings[]
  @@map("users")
}

model Collection {
  id          Int                 @id @default(autoincrement())
  name        String
  createdBy   User                @relation(name: "UserCollections", references: [id], fields: [userId])
  words       WordForCollection[] @relation(name: "CollectionWords")
  userId      Int
  description String?
  image       String?
  isPublic    Boolean?            @default(true)
  deleted     Boolean             @default(false)

  UserCollectionSettings UserCollectionSettings[]
  @@unique([name, userId])
  @@map("collections")
}

model Word {
  id              Int                 @id @default(autoincrement())
  word            String
  translation     String
  collectionWords WordForCollection[] @relation(name: "WordCollection")

  @@unique([word, translation], name: "wordComposite")
  @@map("words")
}

model WordForCollection {
  collectionId Int
  wordId       Int
  collection   Collection @relation(name: "CollectionWords", fields: [collectionId], references: [id])
  word         Word       @relation(name: "WordCollection", fields: [wordId], references: [id])

  @@id([collectionId, wordId])
  @@map("collectionWords")
}

model UserWordProgress {
  userId           Int
  user             User     @relation(name: "UserWordProgress", fields: [userId], references: [id])
  collectionWordId Int
  nextReview       DateTime
  stage            Int      @default(0)

  @@id([userId, collectionWordId])
  @@map("userProgress")
}

model UserCollectionSettings {
  user                    User       @relation(fields: [userId], references: [id])
  userId                  Int
  collection              Collection @relation(fields: [collectionId], references: [id])
  collectionId            Int
  stageOneInterval        Int        @default(1) // default 1 day
  stageTwoInterval        Int        @default(7) // default 7 days
  stageThreeInterval      Int        @default(30) // default 30 days
  stageFourInterval       Int        @default(90) // default 90 days
  stageFiveInterval       Int        @default(180) // default 180 days
  showAnswerAfterQuestion Boolean    @default(true)
  difficultyLevel         Int        @default(1)

  @@id([userId, collectionId])
  @@map("userCollectionSettings")
}
